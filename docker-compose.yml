x-defaults: &step_defaults
  tty: true
  env_file:
    - path: .env
      required: false
  volumes:
    - ./data:/app/data
    - ./logs:/app/logs
    - ./config:/app/config

services:
  # ---------------------------------------------------
  # app: Runs the full ETL pipeline (main entrypoint)
  # ---------------------------------------------------
  app:
    <<: *step_defaults
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: skylytics_app
    command: "python src/main.py"

  # ---------------------------------------------------
  # test: Runs all unit tests using pytest
  # ---------------------------------------------------
  test:
    <<: *step_defaults
    build:
      context: .
      dockerfile: docker/test.Dockerfile
    container_name: skylytics_test
    command: "poetry run pytest tests/"
    volumes:
      - .:/app

  # ---------------------------------------------------
  # location_resolver: Resolves city, region from IP
  # ---------------------------------------------------
  location_resolver:
    <<: *step_defaults
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: skylytics_step_location_resolver
    command: "python src/location_resolver.py"

  # ---------------------------------------------------
  # weather_data_fetcher: Pulls weather data from API
  # ---------------------------------------------------
  weather_data_fetcher:
    <<: *step_defaults
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: skylytics_step_weather_data_fetcher
    command: "python src/weather_data_fetcher.py"
    depends_on:
      - location_resolver

  # ---------------------------------------------------
  # data_cleaner: Cleans and transforms weather data
  # ---------------------------------------------------
  data_cleaner:
    <<: *step_defaults
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: skylytics_step_data_cleaner
    command: "python src/data_cleaner.py"
    depends_on:
      - weather_data_fetcher
